  effClose,     ///< no arguments  @see AudioEffect::close ; open is 0
  effSetProgram,    ///< [value]: new program number  @see AudioEffect::setProgram
  effGetProgram,    ///< [return value]: current program number  @see AudioEffect::getProgram
  effSetProgramName,  ///< [ptr]: char* with new program name, limited to #kVstMaxProgNameLen  @see AudioEffect::setProgramName
  effGetProgramName,  ///< [ptr]: char buffer for current program name, limited to #kVstMaxProgNameLen  @see AudioEffect::getProgramName
  effGetParamLabel, ///< [ptr]: char buffer for parameter label, limited to #kVstMaxParamStrLen  @see AudioEffect::getParameterLabel
  effGetParamDisplay, ///< [ptr]: char buffer for parameter display, limited to #kVstMaxParamStrLen  @see AudioEffect::getParameterDisplay
  effGetParamName,  ///< [ptr]: char buffer for parameter name, limited to #kVstMaxParamStrLen  @see AudioEffect::getParameterName
  DECLARE_VST_DEPRECATED (effGetVu),  ///< \deprecated deprecated in VST 2.4
  effSetSampleRate, ///< [opt]: new sample rate for audio processing  @see AudioEffect::setSampleRate
  effSetBlockSize,  ///< [value]: new maximum block size for audio processing  @see AudioEffect::setBlockSize
  effMainsChanged,  ///< [value]: 0 means "turn off", 1 means "turn on"  @see AudioEffect::suspend @see AudioEffect::resume
  effEditGetRect,   ///< [ptr]: #ERect** receiving pointer to editor size  @see ERect @see AEffEditor::getRect
  effEditOpen,    ///< [ptr]: system dependent Window pointer, e.g. HWND on Windows  @see AEffEditor::open
  effEditClose,   ///< no arguments @see AEffEditor::close
  DECLARE_VST_DEPRECATED (effEditDraw), ///< \deprecated deprecated in VST 2.4
  DECLARE_VST_DEPRECATED (effEditMouse),  ///< \deprecated deprecated in VST 2.4
  DECLARE_VST_DEPRECATED (effEditKey),  ///< \deprecated deprecated in VST 2.4
  effEditIdle,    ///< no arguments @see AEffEditor::idle
  DECLARE_VST_DEPRECATED (effEditTop),  ///< \deprecated deprecated in VST 2.4
  DECLARE_VST_DEPRECATED (effEditSleep),  ///< \deprecated deprecated in VST 2.4
  DECLARE_VST_DEPRECATED (effIdentify), ///< \deprecated deprecated in VST 2.4
  effGetChunk,    ///< [ptr]: void** for chunk data address [index]: 0 for bank, 1 for program  @see AudioEffect::getChunk
  effSetChunk,    ///< [ptr]: chunk data [value]: byte size [index]: 0 for bank, 1 for program  @see AudioEffect::setChunk
  effProcessEvents = effSetChunk + 1    ///< [ptr]: #VstEvents*  @see AudioEffectX::processEvents
  , effCanBeAutomated           ///< [index]: parameter index [return value]: 1=true, 0=false  @see AudioEffectX::canParameterBeAutomated
  , effString2Parameter         ///< [index]: parameter index [ptr]: parameter string [return value]: true for success  @see AudioEffectX::string2parameter
  , DECLARE_VST_DEPRECATED (effGetNumProgramCategories) ///< \deprecated deprecated in VST 2.4
  , effGetProgramNameIndexed        ///< [index]: program index [ptr]: buffer for program name, limited to #kVstMaxProgNameLen [return value]: true for success  @see AudioEffectX::getProgramNameIndexed
  , DECLARE_VST_DEPRECATED (effCopyProgram) ///< \deprecated deprecated in VST 2.4
  , DECLARE_VST_DEPRECATED (effConnectInput)  ///< \deprecated deprecated in VST 2.4
  , DECLARE_VST_DEPRECATED (effConnectOutput) ///< \deprecated deprecated in VST 2.4
  , effGetInputProperties         ///< [index]: input index [ptr]: #VstPinProperties* [return value]: 1 if supported  @see AudioEffectX::getInputProperties
  , effGetOutputProperties        ///< [index]: output index [ptr]: #VstPinProperties* [return value]: 1 if supported  @see AudioEffectX::getOutputProperties
  , effGetPlugCategory          ///< [return value]: category  @see VstPlugCategory @see AudioEffectX::getPlugCategory
  , DECLARE_VST_DEPRECATED (effGetCurrentPosition)  ///< \deprecated deprecated in VST 2.4
  , DECLARE_VST_DEPRECATED (effGetDestinationBuffer)  ///< \deprecated deprecated in VST 2.4
  , effOfflineNotify            ///< [ptr]: #VstAudioFile array [value]: count [index]: start flag  @see AudioEffectX::offlineNotify
  , effOfflinePrepare           ///< [ptr]: #VstOfflineTask array [value]: count  @see AudioEffectX::offlinePrepare
  , effOfflineRun             ///< [ptr]: #VstOfflineTask array [value]: count  @see AudioEffectX::offlineRun
  , effProcessVarIo           ///< [ptr]: #VstVariableIo*  @see AudioEffectX::processVariableIo
  , effSetSpeakerArrangement        ///< [value]: input #VstSpeakerArrangement* [ptr]: output #VstSpeakerArrangement*  @see AudioEffectX::setSpeakerArrangement
  , DECLARE_VST_DEPRECATED (effSetBlockSizeAndSampleRate) ///< \deprecated deprecated in VST 2.4
  , effSetBypass              ///< [value]: 1 = bypass, 0 = no bypass  @see AudioEffectX::setBypass
  , effGetEffectName            ///< [ptr]: buffer for effect name, limited to #kVstMaxEffectNameLen  @see AudioEffectX::getEffectName
  , DECLARE_VST_DEPRECATED (effGetErrorText)  ///< \deprecated deprecated in VST 2.4
  , effGetVendorString          ///< [ptr]: buffer for effect vendor string, limited to #kVstMaxVendorStrLen  @see AudioEffectX::getVendorString
  , effGetProductString         ///< [ptr]: buffer for effect vendor string, limited to #kVstMaxProductStrLen  @see AudioEffectX::getProductString
  , effGetVendorVersion         ///< [return value]: vendor-specific version  @see AudioEffectX::getVendorVersion
  , effVendorSpecific           ///< no definition, vendor specific handling  @see AudioEffectX::vendorSpecific
  , effCanDo                ///< [ptr]: "can do" string [return value]: 0: "don't know" -1: "no" 1: "yes"  @see AudioEffectX::canDo
  , effGetTailSize            ///< [return value]: tail size (for example the reverb time of a reverb plug-in); 0 is default (return 1 for 'no tail')
  , DECLARE_VST_DEPRECATED (effIdle)        ///< \deprecated deprecated in VST 2.4
  , DECLARE_VST_DEPRECATED (effGetIcon)     ///< \deprecated deprecated in VST 2.4
  , DECLARE_VST_DEPRECATED (effSetViewPosition) ///< \deprecated deprecated in VST 2.4
  , effGetParameterProperties       ///< [index]: parameter index [ptr]: #VstParameterProperties* [return value]: 1 if supported  @see AudioEffectX::getParameterProperties
  , DECLARE_VST_DEPRECATED (effKeysRequired)  ///< \deprecated deprecated in VST 2.4
  , effGetVstVersion            ///< [return value]: VST version  @see AudioEffectX::getVstVersion
  , effEditKeyDown            ///< [index]: ASCII character [value]: virtual key [opt]: modifiers [return value]: 1 if key used  @see AEffEditor::onKeyDown
  , effEditKeyUp              ///< [index]: ASCII character [value]: virtual key [opt]: modifiers [return value]: 1 if key used  @see AEffEditor::onKeyUp
  , effSetEditKnobMode          ///< [value]: knob mode 0: circular, 1: circular relativ, 2: linear (CKnobMode in VSTGUI)  @see AEffEditor::setKnobMode
  , effGetMidiProgramName         ///< [index]: MIDI channel [ptr]: #MidiProgramName* [return value]: number of used programs, 0 if unsupported  @see AudioEffectX::getMidiProgramName
  , effGetCurrentMidiProgram        ///< [index]: MIDI channel [ptr]: #MidiProgramName* [return value]: index of current program  @see AudioEffectX::getCurrentMidiProgram
  , effGetMidiProgramCategory       ///< [index]: MIDI channel [ptr]: #MidiProgramCategory* [return value]: number of used categories, 0 if unsupported  @see AudioEffectX::getMidiProgramCategory
  , effHasMidiProgramsChanged       ///< [index]: MIDI channel [return value]: 1 if the #MidiProgramName(s) or #MidiKeyName(s) have changed  @see AudioEffectX::hasMidiProgramsChanged
  , effGetMidiKeyName           ///< [index]: MIDI channel [ptr]: #MidiKeyName* [return value]: true if supported, false otherwise  @see AudioEffectX::getMidiKeyName
  , effBeginSetProgram          ///< no arguments  @see AudioEffectX::beginSetProgram
  , effEndSetProgram            ///< no arguments  @see AudioEffectX::endSetProgram
  , effGetSpeakerArrangement        ///< [value]: input #VstSpeakerArrangement* [ptr]: output #VstSpeakerArrangement*  @see AudioEffectX::getSpeakerArrangement
  , effShellGetNextPlugin         ///< [ptr]: buffer for plug-in name, limited to #kVstMaxProductStrLen [return value]: next plugin's uniqueID  @see AudioEffectX::getNextShellPlugin
  , effStartProcess           ///< no arguments  @see AudioEffectX::startProcess
  , effStopProcess            ///< no arguments  @see AudioEffectX::stopProcess
  , effSetTotalSampleToProcess        ///< [value]: number of samples to process, offline only!  @see AudioEffectX::setTotalSampleToProcess
  , effSetPanLaw              ///< [value]: pan law [opt]: gain  @see VstPanLawType @see AudioEffectX::setPanLaw
  , effBeginLoadBank            ///< [ptr]: #VstPatchChunkInfo* [return value]: -1: bank can't be loaded, 1: bank can be loaded, 0: unsupported  @see AudioEffectX::beginLoadBank
  , effBeginLoadProgram         ///< [ptr]: #VstPatchChunkInfo* [return value]: -1: prog can't be loaded, 1: prog can be loaded, 0: unsupported  @see AudioEffectX::beginLoadProgram
  , effSetProcessPrecision        ///< [value]: @see VstProcessPrecision  @see AudioEffectX::setProcessPrecision
  , effGetNumMidiInputChannels      ///< [return value]: number of used MIDI input channels (1-15)  @see AudioEffectX::getNumMidiInputChannels
  , effGetNumMidiOutputChannels     ///< [return value]: number of used MIDI output channels (1-15)  @see AudioEffectX::getNumMidiOutputChannels
